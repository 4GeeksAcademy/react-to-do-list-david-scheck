================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-08-13T00:29:29.766Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.devcontainer/
  devcontainer.json
  welcome.js
.github/
  settings.yml
docs/
  DEPLOY.md
  MANUAL_INSTALATION.md
public/
  index.html
src/
  js/
    component/
      App.jsx
      home.jsx
      TodoItem.jsx
      TodoList.jsx
    index.js
  styles/
    index.css
.eslintrc
.gitignore
.gitpod.yml
.htaccess
CHANGELOG.md
deploy-to-github.js
open-in-gitpod.svg
package.json
README.md
template.html
webpack.config.js

================================================================
Repository Files
================================================================

================
File: .devcontainer/devcontainer.json
================
// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/javascript-node
{
	"name": "Node.js",
	// Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
	"image": "mcr.microsoft.com/devcontainers/javascript-node:0-16",

	// Features to add to the dev container. More info: https://containers.dev/features.
	// "features": {},

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	"forwardPorts": [3000],

	// Use 'postCreateCommand' to run commands after the container is created.
	"postCreateCommand": "npm install && node .devcontainer/welcome.js"

	// Configure tool-specific properties.
	// "customizations": {},

	// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
	// "remoteUser": "root"
}

================
File: .devcontainer/welcome.js
================
console.log("Welcome!")

================
File: .github/settings.yml
================
repository:
  has_wiki: false

# Labels: define labels for Issues and Pull Requests
labels:
  - name: "bug"
    color: c10000
  - name: ":nerd_face: 4geeks student"
    color: 7057ff
  - name: "enhancement"
    color: a2eeef
  - name: "first-timers-only"
    color: 69db89
  - name: "good first issue"
    color: 7057ff
  - name: "help wanted"
    color: 008672
  - name: ":star: P1"
    color: fbca04
  - name: ":star: P2"
    color: fbca04
  - name: ":memo: bc-writter"
    color: 98bde2
  - name: ":computer: bc-coder"
    color: 98bde2
  - name: ":beetle: bc-inspector"
    color: 98bde2

================
File: docs/DEPLOY.md
================
# How to deploy your website using this boilerplate

First make sure to choose your platform:

## Deploying to Github pages:

It's great for small projects that don't require your own domain or real use with users and growth, for example: Personal portfolio websites.

```sh
$ npm run deploy:github
```

## Deploying to `Vercel` (recomended)

This hosting is ideal for production ready website and requires only two steps.

- Create an account on vercel.com and come back to this tutorial.
- After creating the account type on the command line: `$ vercel` and follow the steps.

================
File: docs/MANUAL_INSTALATION.md
================
# React Hello World

1) Create a new NPM Package
```sh
$ npm init -Y
```
2) Add the webpack module bundler
```sh
$ npm install --save-dev webpack webpack-cli
```
3) Create a webpack.config.js

```
const path = require('path');

module.exports = {
  entry: './src/js/index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist')
  }
};
```
4) Install babel

```sh
$ npm install --save-dev babel-core babel-loader babel-cli babel-preset-env
```

Configure your webpack.config.js to use the babel loader
```
const path = require('path');

module.exports = {
  entry: './src/js/index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist')
  },
  module: {
    loaders: [
        { test: /\.js$/, exclude: /node_modules/, loader: "babel-loader" }
    ]
  }
};
```

Also configure your package.json to use the "env" and "react" presets.
```json
  ...
  "babel":{
    "presets": [
      "env",
      "react"
    ]
  },
  ...
```

5) Install react pnm libraries (react is just a library)

```sh
npm install --save react react-dom
```

## Important note:

If you want include Images, Fonts or any other types of files rather than JS you will have to add the loaders into the webpack.config.js and install the respective npm packages (image-loader, style-loader, etc).

================
File: public/index.html
================
<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta charset="UTF-8">
        <title>Hello Rigo with Vanilla.js</title>
       
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet"crossorigin="anonymous">
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous">
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Architects+Daughter&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"> 
        <link rel="icon" href="/4geeks.ico"><script defer src="/bundle.js"></script></head>
    <body>
        <div id="app"></div>

        <!-- Many of bootstrap components require the use of JavaScript to function -->
        <!-- Popper and BootStrap JS -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
    </body>
</html>

================
File: src/js/component/App.jsx
================
import React from 'react';
import TodoList from './TodoList';

const App = () => {
  return (
    <div className="app-container">
      <h1 className="title">todos</h1>
      <TodoList />
    </div>
  );
};

export default App;

================
File: src/js/component/home.jsx
================
import React, { useState } from 'react';

const TodoList = () => {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState('');
  const [editIndex, setEditIndex] = useState(null);

  const addTask = (e) => {
    e.preventDefault();
    if (newTask.trim() !== '') {
      if (editIndex !== null) {
        const updatedTasks = tasks.map((task, index) =>
          index === editIndex ? newTask.trim() : task
        );
        setTasks(updatedTasks);
        setEditIndex(null);
      } else {
        setTasks([newTask.trim(), ...tasks]);
        console.log(newTask)
      }
      setNewTask('');
      console.log(tasks)
    }
  };

  const deleteTask = (index) => {
    const updatedTasks = tasks.filter((_, i) => i !== index);
    setTasks(updatedTasks);
  };

  const editTask = (index) => {
    setNewTask(tasks[index]);
    setEditIndex(index);
  };

  return (
    <div>
      <h1 className="title">todos</h1>
      <div className="todo-container">
        <form onSubmit={addTask} className="input-form">
          <input
            type="text"
            value={newTask}
            onChange={(e) => setNewTask(e.target.value)}
            placeholder="What needs to be done?"
            className="task-input"
          />
        </form>
        <ul className="task-list">
  {tasks.map((task, index) => (
    <li key={index} className="task-item">
      <span className="task-text">{task}</span>
      <div className="row buttons">
        <button onClick={() => editTask(index)} className="edit-btn">
          <i className="fas fa-edit"></i>
        </button>
        <button onClick={() => deleteTask(index)} className="delete-btn">
          <i className="fas fa-trash-alt"></i>
        </button>
      </div>
    </li>
  ))}
</ul>
        <style jsx>{`
          @import url('https://fonts.googleapis.com/css2?family=Architects+Daughter&family=Honk&family=Raleway:ital,wght@0,100..900;1,100..900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

          body {
            font-family: "Raleway", sans-serif;
            font-optical-sizing: auto;
            font-weight: 200;
            font-style: normal;
            background-image: url('https://cdn.pixabay.com/photo/2012/12/24/08/39/background-72250_1280.jpg');
            background-size: cover;
            background-attachment: fixed;
            background-repeat: no-repeat;
          }

          .todo-container {
            font-family: "Raleway", sans-serif;
            font-weight: 200;
            max-width: 400px;
            margin: 40px auto;
            padding: 20px;
            background-color: white;
            box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
            position: relative;
            border-radius: 0;
          }

          .todo-container::before,
          .todo-container::after {
            content: '';
            position: absolute;
            background-color: white;
            border: 1px solid #e0e0e0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
            border-radius: 0;
          }

          .todo-container::before {
            bottom: -6px;
            left: 3px;
            right: -3px;
            height: 100%;
            z-index: -1;
          }

          .todo-container::after {
            bottom: -12px;
            left: 6px;
            right: -6px;
            height: 100%;
            z-index: -2;
          }

          .title {
            font-size: 48px;
            font-weight: bold;
            margin-bottom: 20px;
            text-align: center;
            font-family: "Raleway", sans-serif;
            font-weight: 200;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 8px;
          }

          .input-form {
            margin-bottom: 10px;
            position: relative;
          }

          .task-input {
            width: 100%;
            border: none;
            font-size: 16px;
            padding: 10px 0;
            outline: none;
            font-family: "Raleway", sans-serif;
            font-weight: 200;
          }

          .task-input::placeholder {
            color: #999;
          }

          .input-form::after {
            content: '';
            position: absolute;
            left: -20px;
            right: -20px;
            bottom: -10px;
            height: 1px;
            background-color: #eee;
          }

          .task-list {
            list-style-type: none;
            padding: 0;
          }

          .task-item {
            padding: 10px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
            font-family: "Raleway", sans-serif;
            font-weight: 200;
          }

          .task-text {
            flex-grow: 1;
            margin-right: 10px;
          }

       .button1 {
       }

       .button2 {
       padding:}

          .edit-btn, .delete-btn {
            background: none;
            border: none;
            font-size: 20px;
            color: #999;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.3s;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0;
            width: 30px;
            height: 30px;
            margin-left: 10px;
          }


          .edit-btn {
            margin-right: 10px;
            padding-right: 70px
          }

          .task-item:hover .edit-btn,
          .task-item:hover .delete-btn {
            opacity: 1;
          }

          .task-item::after {
            content: '';
            position: absolute;
            left: -20px;
            right: -20px;
            bottom: 0;
            height: 1px;
            background-color: #eee;
          }
        `}</style>
      </div>
    </div>
  );
};

export default TodoList;

================
File: src/js/component/TodoItem.jsx
================
import React from 'react';

const TodoItem = ({ task, onEdit, onDelete }) => {
  return (
    <li className="task-item">
      <span className="task-text">{task}</span>
      <div className="task-buttons">
        <button onClick={onEdit} className="edit-btn">
          <i className="fas fa-edit"></i>
        </button>
        <button onClick={onDelete} className="delete-btn">
          <i className="fas fa-trash-alt"></i>
        </button>
      </div>
    </li>
  );
};

export default TodoItem;

================
File: src/js/component/TodoList.jsx
================
import React, { useState } from 'react';
import TodoItem from './TodoItem';

const TodoList = () => {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState('');
  const [editIndex, setEditIndex] = useState(null);

  const addTask = (e) => {
    e.preventDefault();
    if (newTask.trim() !== '') {
      if (editIndex !== null) {
        const updatedTasks = tasks.map((task, index) =>
          index === editIndex ? newTask.trim() : task
        );
        setTasks(updatedTasks);
        setEditIndex(null);
      } else {
        setTasks([newTask.trim(), ...tasks]);
      }
      setNewTask('');
    }
  };

  const deleteTask = (index) => {
    const updatedTasks = tasks.filter((_, i) => i !== index);
    setTasks(updatedTasks);
  };

  const editTask = (index) => {
    setNewTask(tasks[index]);
    setEditIndex(index);
  };

  return (
    <div className="todo-container">
      <form onSubmit={addTask} className="input-form">
        <input
          type="text"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
          placeholder="What needs to be done?"
          className="task-input"
        />
      </form>
      <ul className="task-list">
        {tasks.map((task, index) => (
          <TodoItem
            key={index}
            task={task}
            onEdit={() => editTask(index)}
            onDelete={() => deleteTask(index)}
          />
        ))}
      </ul>
    </div>
  );
};

export default TodoList;

================
File: src/js/index.js
================
import React from "react";
import ReactDOM from "react-dom/client";

// Import the CSS file
import "../styles/index.css";

// Import the main App component
import App from "./component/App.jsx";

ReactDOM.createRoot(document.getElementById('app')).render(<App />);

================
File: src/styles/index.css
================
@import url('https://fonts.googleapis.com/css2?family=Architects+Daughter&family=Honk&family=Raleway:ital,wght@0,100..900;1,100..900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

body {
  font-family: "Raleway", sans-serif;
  font-optical-sizing: auto;
  font-weight: 200;
  font-style: normal;
  background-image: url('https://cdn.pixabay.com/photo/2012/12/24/08/39/background-72250_1280.jpg');
  background-size: cover;
  background-attachment: fixed;
  background-repeat: no-repeat;
}

.title {
  font-size: 48px;
  font-weight: 200;
  margin-bottom: 20px;
  text-align: center;
  background-color: rgba(255, 255, 255, 0.8);
  padding: 10px 0;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000;
}

.app-container {
  max-width: 400px;
  margin: 100px auto 40px; /* Increased top margin to accommodate fixed header */
}

.todo-container {
  max-width: 400px;
  padding: 20px;
  background-color: white;
  box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
  position: relative;
  border-radius: 0;
}

.todo-container::before,
.todo-container::after {
  content: '';
  position: absolute;
  background-color: white;
  border: 1px solid #e0e0e0;
  box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
  border-radius: 0;
}

.todo-container::before {
  bottom: -6px;
  left: 3px;
  right: -3px;
  height: 100%;
  z-index: -1;
}

.todo-container::after {
  bottom: -12px;
  left: 6px;
  right: -6px;
  height: 100%;
  z-index: -2;
}

.input-form {
  margin-bottom: 10px;
  position: relative;
}

.task-input {
  width: 100%;
  border: none;
  font-size: 16px;
  padding: 10px 0;
  outline: none;
  font-family: "Raleway", sans-serif;
  font-weight: 200;
}

.task-input::placeholder {
  color: #999;
}

.input-form::after {
  content: '';
  position: absolute;
  left: -20px;
  right: -20px;
  bottom: -10px;
  height: 1px;
  background-color: #eee;
}

.task-list {
  list-style-type: none;
  padding: 0;
}

.task-item {
  padding: 10px 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
  font-family: "Raleway", sans-serif;
  font-weight: 200;
}

.task-text {
  flex-grow: 1;
  margin-right: 10px;
}

.task-buttons {
  display: flex;
}

.edit-btn,
.delete-btn {
  background: none;
  border: none;
  font-size: 20px;
  color: #999;
  cursor: pointer;
  opacity: 0;
  transition: opacity 0.3s;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0;
  width: 30px;
  height: 30px;
  margin-left: 10px;
}

.task-item:hover .edit-btn,
.task-item:hover .delete-btn {
  opacity: 1;
}

.task-item::after {
  content: '';
  position: absolute;
  left: -20px;
  right: -20px;
  bottom: 0;
  height: 1px;
  background-color: #eee;
}

================
File: .eslintrc
================
{
  "parser": "@babel/eslint-parser",
  "plugins": [
    "react"
  ],
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "env": {
    "browser": true,
    "es6": true
  },
  "rules": {
    "strict":0,
    "no-unused-vars": 0,
    "no-mixed-spaces-and-tabs": 0,
    "no-debugger": 0,
    "no-console": 1,
    "semi": ["error", "always"],
    "allowImportExportEverywhere": 0,
    "comma-dangle": [1, { //when to use the last comma
        "arrays": "never",
        "objects": "never",
        "imports": "never",
        "exports": "never",
        "functions": "ignore",
    }],
    "react/prop-types": [2]
  },
  "extends": ["eslint:recommended", "plugin:react/recommended"]
}

================
File: .gitignore
================
# ignore all files starting with .
.*

# track this file .gitignore (i.e. do NOT ignore it)
!.gitignore
!.gitpod.yml
!.devcontainer
!.github
!.vscode
php_errorlog
.log

# track this file .gitignore (i.e. do NOT ignore it)
!composer.json
!webpack.config.js
!package.json
!webpack.production.js
!webpack.development.js

# track readme.md in the root (i.e. do NOT ignore it)
!README.md

# ignore OS generated files
ehthumbs.db
Thumbs.db

# ignore Editor files
*.sublime-project
*.sublime-workspace
*.komodoproject

# ignore log files and databases
*.log
*.sql
*.sqlite

# ignore compiled files
*.com
*.class
*.dll
*.exe
*.o
*.so

# ignore packaged files
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# ignore node/grunt dependency directories
node_modules/

# ignore the dist directory were our bundle files are going to be
public/*
!public/index.html

dist/*
!dist/index.html

!.gitkeep
!.htaccess
!.eslintrc
.now

================
File: .gitpod.yml
================
ports:
  - port: 8080
    onOpen: open-preview
    visibility: public

tasks:
  - before: nvm install 16
    init: npm install
    command: npm run start


vscode:
  extensions:
    - esbenp.prettier-vscode

================
File: .htaccess
================
<IfModule mod_rewrite.c>

  RewriteEngine On
  RewriteBase /
  RewriteRule ^index\.html$ - [L]
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_FILENAME} !-l
  RewriteRule . /index.html [L]

</IfModule>

================
File: CHANGELOG.md
================
# Changelog

December 6, 2021

- Upgraded all packages to latest version: Webpack v5, React 17, etc.
- Disabled esLint.
- The hot reload is not broken, we need to review how to implemented with the new webpack dev server because the `public` property is not allowed anymore as a paratmeter for the deServer, we tried the following iwthout any luck:

```js
  devServer: {
    port,
    hot: true,
    allowedHosts: "all",
    historyApiFallback: true,
    static: {
      directory: path.resolve(__dirname, "dist"),
    },
    client: {
      webSocketURL: publicUrl
    },
  },
```

================
File: deploy-to-github.js
================
var ghpages = require('gh-pages');
var Console = require('bc-console');
var webpack = require('webpack');
var path = require('path');
var fs = require('fs');

var remoteOriginUrl = require('remote-origin-url');
var gh = require('parse-github-url');

if (!fs.existsSync(path.resolve(__dirname,'.git'))){
    Console.error("No repository found on this project");
    Console.help("Follow this steps to create a new repository for your project: http://kbroman.org/github_tutorial/pages/init.html");
    return;
}

const origin = remoteOriginUrl.sync();
if(!origin || origin==''){
    Console.error("No remote origin has been found on this repository");
    Console.help(`Check your remote by doing:
$ git remote get-url origin

Add your remote by doing:
$ git remote add origin <github_repository_url>
`);
return;
}
Console.info("The remote was found successfully, starting the deploy from here: "+origin);

const repository = gh(origin);
const compiler = webpack(require(path.resolve(__dirname, 'webpack.config.js')));
compiler.run((err, stats) => {
    if (err || stats.hasErrors()) {
      console.log(stats.toString({
        colors: true
      }));
      Console.error("There was an error compiling, review above");
      return;
    }
    Console.info("Your code compiled successfully, proceding to deploy...");
    ghpages.publish('public', function(err) {
        if(err){
            console.error(err);
            Console.error("There was an error publishing your website");
            return;
        }
        //https://<github_user>.github.io/<repository-name>
        Console.success(`Your website has been deployed successfully here: https://${repository["owner"]}.github.io/${repository["name"]}/`);
        Console.info(`Changes on your deployed website take 10 min aprox to show, please be patient. Happy coding!`);
    });
});

================
File: open-in-gitpod.svg
================
<svg width="138px" height="32px" viewBox="0 0 1380 320" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="button">
            <rect id="Background" fill="#1966D2" x="0" y="0" width="1380" height="320" rx="40"></rect>
            <text id="in-Gitpod" opacity="0.703985305" font-family="Helvetica" font-size="140" font-weight="normal" fill="#FFFFFF">
                <tspan x="735" y="210">in Gitpod</tspan>
            </text>
            <text id="Code" font-family="Helvetica" font-size="140" font-weight="normal" fill="#FFFFFF">
                <tspan x="350" y="210">Open</tspan>
            </text>
            <g id="logo" fill="#FFFFFF" transform="translate(112.000000, 57.000000)">
                <polygon id="Path" points="17.74 144.58 17.74 63.57 0 53.33 0 154.76 0 154.77 87.77 205.43 87.77 184.7"></polygon>
                <polygon id="Path" points="87.77 163.95 87.77 104 35.74 73.96 35.74 134.15"></polygon>
                <polygon id="Path" points="89.35 20.55 159.49 60.97 177.21 50.74 89.35 0 1.49 50.73 19.27 60.99"></polygon>
                <polygon id="Path" points="141.48 71.37 89.36 41.33 37.27 71.38 89.35 101.45"></polygon>
                <polygon id="Path" points="90.77 164.06 143.02 134.14 143.02 113.66 107.01 134.15 107.01 113.44 161.02 82.7 161.02 144.58 90.77 184.79 90.77 205.53 178.7 154.78 178.7 154.78 178.7 154.77 178.7 53.35 90.77 104.1"></polygon>
                <polygon id="Path" points="89.35 103.18 89.35 103.19 89.35 103.19 89.35 103.19 89.35 103.18 89.35 103.18"></polygon>
            </g>
        </g>
    </g>
</svg>

================
File: package.json
================
{
	"name": "react-hello",
	"version": "1.0.1",
	"engines": {
		"node": "16.x"
	},
	"description": "",
	"main": "index.js",
	"scripts": {
		"start": "webpack-dev-server --mode development",
		"build": "webpack --mode development",
		"deploy:github": "node deploy-to-github.js"
	},
	"author": "Alejandro Sanchez",
	"license": "ISC",
	"devDependencies": {
		"@babel/cli": "^7.16.0",
		"@babel/core": "^7.16.0",
		"@babel/plugin-proposal-class-properties": "^7.16.0",
		"@babel/plugin-transform-runtime": "^7.16.4",
		"@babel/preset-env": "^7.16.4",
		"@babel/preset-react": "^7.16.0",
		"@babel/runtime": "^7.16.3",
		"babel-eslint": "^10.1.0",
		"babel-loader": "^8.2.3",
		"babel-plugin-transform-class-properties": "^6.24.1",
		"bc-console": "0.0.2",
		"css-loader": "^6.5.1",
		"error-overlay-webpack-plugin": "^1.0.0",
		"eslint": "^8.4.0",
		"eslint-plugin-react": "^7.27.1",
		"eslint-webpack-plugin": "^3.1.1",
		"file-loader": "^6.2.0",
		"gh-pages": "^3.2.3",
		"html-loader": "^3.0.1",
		"html-webpack-plugin": "^5.5.0",
		"parse-github-url": "^1.0.2",
		"remote-origin-url": "^2.0.0",
		"style-loader": "^3.3.1",
		"webpack": "^5.65.0",
		"webpack-cli": "^4.9.1",
		"webpack-dev-server": "^4.6.0"
	},
	"babel": {
		"presets": [
			"@babel/preset-env",
			"@babel/preset-react"
		],
		"plugins": [
			"@babel/plugin-proposal-class-properties",
			[
				"@babel/plugin-transform-runtime",
				{
					"regenerator": true
				}
			]
		]
	},
	"dependencies": {
		"lucide-react": "^0.418.0",
		"prop-types": "^15.7.2",
		"query-string": "^7.0.1",
		"react": "^18.3.1",
		"react-dom": "^18.3.1",
		"react-polyfills": "0.0.1",
		"react-router": "^6.0.2"
	}
}

================
File: README.md
================
# Hello World with React boilerplate

Start coding a react application

> If you are working locally instead of using codespaces or gitpod, please follow [local installation steps](#local-installation-skip-if-you-are-working-on-codespaces-or-gitpod) and come back to this part of the readme.

## How to start coding?

- Install the packages with `$ npm install`.
- Run the webpack server with `$ npm run start`

You can update the `styles/index.css` or `js/index.js` depending on your needs.
Add more files into your, `./src/js/components` or styles folder as you need them.

## Local Installation (skip if you are working on codespaces or gitpod)

Download the boilerplate using git

```
$ git clone https://github.com/4GeeksAcademy/react-hello.git
$ cd react-hello
```

## Publish your website!

This boilerplate is 100% compatible with the free [github pages](https://pages.github.com/) and [vercel](https://vercel.com/) hosting.

It takes just 2 minutes to deploy, [click here to start the process](https://github.com/4GeeksAcademy/react-hello/blob/master/docs/DEPLOY.md).

## Other features

- Automatic Code Formatting: Use of [Prettier](https://prettier.io/) for automatic code indentation and formatting.
- Error reporting: Use of [eslint](https://eslint.org/) for better error reporting.
- Hot Deploy: Use of [Webpack Development Server](https://webpack.js.org/configuration/dev-server/) for hot deploy and live reload.
- One-command publish of the code to github pages with `npm run deploy:github`.
- Babel 7 (really fast).

### Contributors

This template was built as part of the 4Geeks Academy [Coding Bootcamp](https://4geeksacademy.com/us/coding-bootcamp) by [Alejandro Sanchez](https://twitter.com/alesanchezr) and many other contributors. Find out more about our [Full Stack Developer Course](https://4geeksacademy.com/us/coding-bootcamps/part-time-full-stack-developer), and [Data Science Bootcamp](https://4geeksacademy.com/us/coding-bootcamps/datascience-machine-learning).

You can find other templates and resources like this at the [school github page](https://github.com/4geeksacademy/).

================
File: template.html
================
<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta charset="UTF-8">
        <title>Hello Rigo with Vanilla.js</title>
       
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet"crossorigin="anonymous">
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous">

    </head>
    <body>
        <div id="app"></div>

        <!-- Many of bootstrap components require the use of JavaScript to function -->
        <!-- Popper and BootStrap JS -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
    </body>
</html>

================
File: webpack.config.js
================
const webpack = require('webpack');
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const ESLintPlugin = require('eslint-webpack-plugin');
const ErrorOverlayPlugin = require('error-overlay-webpack-plugin');

const port = 3000;
let publicUrl = `ws://localhost:${port}/ws`;
//only for gitpod
if(process.env.GITPOD_WORKSPACE_URL){
  const [schema, host] = process.env.GITPOD_WORKSPACE_URL.split('://');
  publicUrl = `wss://${port}-${host}/ws`;
}
//only for codespaces
if(process.env.CODESPACE_NAME){
  publicUrl = `wss://${process.env.CODESPACE_NAME}-${port}.app.github.dev/ws`;
}

module.exports = {
  entry: [
    './src/js/index.js'
  ],
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'public'),
    publicPath: '/'
  },
  module: {
    rules: [
        {
          test: /\.(js|jsx)$/,
          exclude: /node_modules/,
          use: ['babel-loader']
        },
        {
          test: /\.(css)$/, use: [{
              loader: "style-loader" // creates style nodes from JS strings
          }, {
              loader: "css-loader" // translates CSS into CommonJS
          }]
        }, //css only files
        { 
          test: /\.(png|svg|jpg|gif)$/, use: {
            loader: 'file-loader',
            options: { name: '[name].[ext]' } 
          }
        }, //for images
        { test: /\.woff($|\?)|\.woff2($|\?)|\.ttf($|\?)|\.eot($|\?)|\.svg($|\?)/, use: ['file-loader'] } //for fonts
    ]
  },
  resolve: {
    extensions: ['*', '.js', '.jsx']
  },
  devtool: "source-map",
  devServer: {
    port,
    hot: true,
    allowedHosts: "all",
    historyApiFallback: true,
    static: {
      directory: path.resolve(__dirname, "dist"),
    },
    client: {
      webSocketURL: publicUrl
    },
  },
  plugins: [
    new webpack.HotModuleReplacementPlugin(),
    // new ESLintPlugin({
    //   files: path.resolve(__dirname, "src"),
    // }),
    new HtmlWebpackPlugin({
        favicon: '4geeks.ico',
        template: 'template.html'
    }),
  ]
};
